import {
  require_jsx_runtime
} from "./chunk-GRWX7YRK.js";
import {
  __toESM,
  require_react
} from "./chunk-I4MZPW7S.js";

// node_modules/@un360/core/dist/index.esm.js
var import_react = __toESM(require_react());
var ChatbotAPI = class {
  constructor(config) {
    this.apiKey = config.apiKey;
    this.baseUrl = config.apiBaseUrl || "http://127.0.0.1:8000";
    this.productId = config.productId;
    this.sessionId = config.sessionId || this.generateSessionId();
  }
  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  async request(endpoint, options = {}) {
    const url = `${this.baseUrl}${endpoint}`;
    const response = await fetch(url, {
      ...options,
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": this.apiKey,
        ...options.headers
      }
    });
    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: "Unknown error" }));
      throw new Error(error.error || `HTTP ${response.status}`);
    }
    return response.json();
  }
  async sendMessage(message) {
    const data = await this.request("/api/v1/chat", {
      method: "POST",
      body: JSON.stringify({
        message,
        product_id: this.productId,
        session_id: this.sessionId
      })
    });
    return data.response;
  }
  async getSuggestedQuestions() {
    return this.request(`/api/v1/questions/${this.productId}`);
  }
  async getWidgetConfig() {
    return this.request("/api/v1/config");
  }
};
function useChat(options) {
  const [messages, setMessages] = (0, import_react.useState)([]);
  const [isLoading, setIsLoading] = (0, import_react.useState)(false);
  const [isBotTyping, setIsBotTyping] = (0, import_react.useState)(false);
  const [suggestedQuestions, setSuggestedQuestions] = (0, import_react.useState)([]);
  const [error, setError] = (0, import_react.useState)(null);
  const apiClientRef = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    apiClientRef.current = new ChatbotAPI({
      apiKey: options.apiKey,
      productId: options.productId,
      apiBaseUrl: options.apiBaseUrl
    });
    const fetchQuestions = async () => {
      try {
        const questions = await apiClientRef.current.getSuggestedQuestions();
        setSuggestedQuestions(questions);
      } catch (err) {
        console.error("Failed to fetch suggested questions:", err);
      }
    };
    fetchQuestions();
  }, [options.apiKey, options.productId, options.apiBaseUrl]);
  const sendMessage = (0, import_react.useCallback)(async (messageText) => {
    if (!messageText.trim() || !apiClientRef.current)
      return;
    const userMessage = {
      sender: "user",
      text: messageText,
      timestamp: Date.now()
    };
    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);
    setIsBotTyping(true);
    setError(null);
    try {
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      const response = await apiClientRef.current.sendMessage(messageText);
      const botMessage = {
        sender: "chatbot",
        text: response,
        timestamp: Date.now()
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (err) {
      const error2 = err instanceof Error ? err : new Error("Unknown error");
      setError(error2);
      if (options.onError) {
        options.onError(error2);
      }
      const errorMessage = {
        sender: "chatbot",
        text: "Sorry, something went wrong. Please try again.",
        timestamp: Date.now()
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
      setIsBotTyping(false);
    }
  }, [options]);
  const clearMessages = (0, import_react.useCallback)(() => {
    setMessages([]);
    setError(null);
  }, []);
  return {
    messages,
    sendMessage,
    isLoading,
    isBotTyping,
    suggestedQuestions,
    error,
    clearMessages
  };
}
function formatTimestamp(timestamp) {
  const date = new Date(timestamp);
  return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
}
function validateConfig(config) {
  return !!(config.apiKey && config.productId);
}

// node_modules/@un360/ui/dist/index.esm.js
var import_react2 = __toESM(require_react());
var ChatMessage = ({ message, theme }) => {
  const isUser = message.sender === "user";
  return import_react2.default.createElement(
    "div",
    { style: {
      display: "flex",
      justifyContent: isUser ? "flex-end" : "flex-start",
      marginBottom: "12px"
    } },
    import_react2.default.createElement("div", { style: {
      backgroundColor: isUser ? theme.primaryColor : "#f1f1f1",
      color: isUser ? theme.secondaryColor : "#333",
      padding: "10px 14px",
      borderRadius: "12px",
      maxWidth: "70%",
      wordBreak: "break-word",
      fontSize: "14px",
      lineHeight: "1.4"
    } }, message.text)
  );
};
var SuggestedQuestions = ({ questions, onClick }) => {
  return import_react2.default.createElement(import_react2.default.Fragment, null, questions.map((q) => import_react2.default.createElement("div", { key: q.id, onClick: () => onClick(q.question), style: {
    backgroundColor: "#f9f9f9",
    padding: "12px",
    borderRadius: "8px",
    marginBottom: "8px",
    cursor: "pointer",
    border: "1px solid #e0e0e0",
    transition: "all 0.2s"
  } }, q.question)));
};
var TypingIndicator = () => {
  return import_react2.default.createElement(
    "div",
    { style: { display: "flex", justifyContent: "flex-start", marginBottom: "12px" } },
    import_react2.default.createElement(
      "div",
      { style: {
        backgroundColor: "#f1f1f1",
        padding: "10px 14px",
        borderRadius: "12px",
        fontSize: "14px"
      } },
      import_react2.default.createElement("span", { style: { animation: "pulse 1.5s infinite" } }, "●"),
      import_react2.default.createElement("span", { style: { animation: "pulse 1.5s infinite 0.2s" } }, "●"),
      import_react2.default.createElement("span", { style: { animation: "pulse 1.5s infinite 0.4s" } }, "●")
    )
  );
};
var ChatMessages = ({ messages, isBotTyping, greetingMessage, suggestedQuestions, onQuestionClick, theme }) => {
  const messagesEndRef = (0, import_react2.useRef)(null);
  (0, import_react2.useEffect)(() => {
    var _a;
    (_a = messagesEndRef.current) == null ? void 0 : _a.scrollIntoView({ behavior: "smooth" });
  }, [messages]);
  return import_react2.default.createElement(
    "div",
    { style: {
      flex: 1,
      overflowY: "auto",
      padding: "16px",
      backgroundColor: theme.backgroundColor
    } },
    messages.length === 0 && import_react2.default.createElement("div", { style: { textAlign: "center", color: "#999", padding: "20px", fontStyle: "italic" } }, greetingMessage),
    messages.length === 0 && import_react2.default.createElement(SuggestedQuestions, { questions: suggestedQuestions, onClick: onQuestionClick }),
    messages.map((msg, idx) => import_react2.default.createElement(ChatMessage, { key: idx, message: msg, theme })),
    isBotTyping && import_react2.default.createElement(TypingIndicator, null),
    import_react2.default.createElement("div", { ref: messagesEndRef })
  );
};
var ChatInput = ({ onSend, placeholder, theme }) => {
  const [inputValue, setInputValue] = (0, import_react2.useState)("");
  const handleSend = () => {
    if (inputValue.trim()) {
      onSend(inputValue);
      setInputValue("");
    }
  };
  return import_react2.default.createElement(
    "div",
    { style: {
      padding: "16px",
      borderTop: "1px solid #e0e0e0",
      backgroundColor: theme.secondaryColor,
      display: "flex",
      gap: "8px"
    } },
    import_react2.default.createElement("input", { type: "text", value: inputValue, onChange: (e) => setInputValue(e.target.value), onKeyPress: (e) => e.key === "Enter" && handleSend(), placeholder, style: {
      flex: 1,
      padding: "10px 14px",
      border: "1px solid #e0e0e0",
      borderRadius: "20px",
      fontSize: "14px",
      outline: "none"
    } }),
    import_react2.default.createElement("button", { onClick: handleSend, style: {
      backgroundColor: theme.primaryColor,
      color: theme.secondaryColor,
      border: "none",
      borderRadius: "50%",
      width: "40px",
      height: "40px",
      cursor: "pointer",
      fontSize: "18px"
    } }, "↑")
  );
};
var FloatingButton = ({ onClick, position, theme }) => {
  return import_react2.default.createElement("button", { onClick, style: {
    position: "fixed",
    [position.includes("right") ? "right" : "left"]: "20px",
    [position.includes("bottom") ? "bottom" : "top"]: "20px",
    width: "60px",
    height: "60px",
    borderRadius: "50%",
    border: "none",
    backgroundColor: theme.primaryColor,
    color: theme.secondaryColor,
    fontSize: "24px",
    cursor: "pointer",
    boxShadow: "0 4px 12px rgba(0,0,0,0.15)",
    zIndex: 9999
  } }, "💬");
};
function useClickOutside(ref, handler) {
  (0, import_react2.useEffect)(() => {
    const listener = (event) => {
      if (!ref.current || ref.current.contains(event.target)) {
        return;
      }
      handler();
    };
    document.addEventListener("mousedown", listener);
    document.addEventListener("touchstart", listener);
    return () => {
      document.removeEventListener("mousedown", listener);
      document.removeEventListener("touchstart", listener);
    };
  }, [ref, handler]);
}
var ChatHeader = ({ onMinimize, onMaximize, onClose, theme }) => {
  return import_react2.default.createElement(
    "div",
    { style: {
      backgroundColor: theme.primaryColor,
      color: theme.secondaryColor,
      padding: "16px",
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center"
    } },
    import_react2.default.createElement("span", { style: { fontWeight: "bold", fontSize: "16px" } }, "Product Assistant"),
    import_react2.default.createElement(
      "div",
      { style: { display: "flex", gap: "8px" } },
      import_react2.default.createElement("button", { onClick: onMinimize, style: buttonStyle }, "−"),
      import_react2.default.createElement("button", { onClick: onMaximize, style: buttonStyle }, "□"),
      import_react2.default.createElement("button", { onClick: onClose, style: buttonStyle }, "×")
    )
  );
};
var buttonStyle = {
  background: "transparent",
  border: "none",
  color: "white",
  fontSize: "20px",
  cursor: "pointer",
  padding: "0 6px"
};
var ChatWidget = ({ apiKey, productId, apiBaseUrl, position = "bottom-right", theme = {}, greetingMessage = "Hello! Ask me about this product.", placeholder = "Type your message..." }) => {
  const [isOpen, setIsOpen] = (0, import_react2.useState)(false);
  const [isMinimized, setIsMinimized] = (0, import_react2.useState)(false);
  const [isMaximized, setIsMaximized] = (0, import_react2.useState)(false);
  const chatRef = (0, import_react2.useRef)(null);
  const { messages, sendMessage, isBotTyping, suggestedQuestions } = useChat({ apiKey, productId, apiBaseUrl });
  useClickOutside(chatRef, () => setIsOpen(false));
  const defaultTheme = {
    primaryColor: theme.primaryColor || "#1976d2",
    secondaryColor: theme.secondaryColor || "#fff",
    backgroundColor: theme.backgroundColor || "#f5f5f5",
    fontFamily: theme.fontFamily || "Arial, sans-serif"
  };
  const handleMinimize = () => {
    setIsMinimized(true);
    setIsMaximized(false);
  };
  const handleMaximize = () => {
    setIsMaximized(true);
    setIsMinimized(false);
  };
  const handleClose = () => setIsOpen(false);
  const toggleChat = () => setIsOpen(!isOpen);
  if (!isOpen) {
    return import_react2.default.createElement(FloatingButton, { onClick: toggleChat, position, theme: defaultTheme });
  }
  return import_react2.default.createElement(
    "div",
    { ref: chatRef, style: {
      position: "fixed",
      [position.includes("right") ? "right" : "left"]: "20px",
      [position.includes("bottom") ? "bottom" : "top"]: "20px",
      width: isMaximized ? "600px" : "350px",
      height: isMinimized ? "60px" : isMaximized ? "80vh" : "500px",
      backgroundColor: defaultTheme.secondaryColor,
      borderRadius: "12px",
      boxShadow: "0 8px 24px rgba(0,0,0,0.2)",
      display: "flex",
      flexDirection: "column",
      overflow: "hidden",
      transition: "all 0.3s ease",
      fontFamily: defaultTheme.fontFamily,
      zIndex: 1e4
    } },
    import_react2.default.createElement(ChatHeader, { onMinimize: handleMinimize, onMaximize: handleMaximize, onClose: handleClose, theme: defaultTheme }),
    !isMinimized && import_react2.default.createElement(
      import_react2.default.Fragment,
      null,
      import_react2.default.createElement(ChatMessages, { messages, isBotTyping, greetingMessage, suggestedQuestions, onQuestionClick: (question) => sendMessage(question), theme: defaultTheme }),
      import_react2.default.createElement(ChatInput, { onSend: sendMessage, placeholder, theme: defaultTheme })
    )
  );
};
function useChatUI() {
  const [isOpen, setIsOpen] = (0, import_react2.useState)(false);
  return {
    isOpen,
    setIsOpen
  };
}

// node_modules/@un360/web-sdk/dist/index.esm.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react3 = __toESM(require_react());
var ChatContext = (0, import_react3.createContext)(void 0);
var ChatProvider = ({ apiKey, productId, apiBaseUrl, children }) => {
  const chatData = useChat({ apiKey, productId, apiBaseUrl });
  const value = {
    ...chatData,
    apiKey,
    productId
  };
  return (0, import_jsx_runtime.jsx)(ChatContext.Provider, { value, children });
};
var useChatContext = () => {
  const context = (0, import_react3.useContext)(ChatContext);
  if (!context) {
    throw new Error("useChatContext must be used within ChatProvider");
  }
  return context;
};
export {
  ChatHeader,
  ChatInput,
  ChatMessage as ChatMessageComponent,
  ChatMessages,
  ChatProvider,
  ChatWidget,
  ChatbotAPI,
  FloatingButton,
  SuggestedQuestions,
  TypingIndicator,
  formatTimestamp,
  useChat,
  useChatContext,
  useChatUI,
  useClickOutside,
  validateConfig
};
//# sourceMappingURL=@un360_web-sdk.js.map
