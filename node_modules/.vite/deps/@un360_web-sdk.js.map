{
  "version": 3,
  "sources": ["../../@un360/core/src/api/chatbot.ts", "../../@un360/core/src/hooks/useChat.ts", "../../@un360/core/src/utils/index.ts", "../../@un360/ui/src/components/ChatMessage.tsx", "../../@un360/ui/src/components/SuggestedQuestions.tsx", "../../@un360/ui/src/components/TypingIndicator.tsx", "../../@un360/ui/src/components/ChatMessages.tsx", "../../@un360/ui/src/components/ChatInput.tsx", "../../@un360/ui/src/components/FloatingButton.tsx", "../../@un360/ui/src/hooks/useClickOutside.ts", "../../@un360/ui/src/components/ChatHeader.tsx", "../../@un360/ui/src/components/ChatWidget.tsx", "../../@un360/ui/src/hooks/useChatUI.ts", "../../@un360/web-sdk/src/provider/ChatProvider.tsx"],
  "sourcesContent": ["import type { ChatConfig, SuggestedQuestion, WidgetConfig } from '../types';\n\nexport class ChatbotAPI {\n  private apiKey: string;\n  private baseUrl: string;\n  private productId: string;\n  private sessionId: string;\n\n  constructor(config: ChatConfig) {\n    this.apiKey = config.apiKey;\n    this.baseUrl = config.apiBaseUrl || 'http://127.0.0.1:8000';\n    this.productId = config.productId;\n    this.sessionId = config.sessionId || this.generateSessionId();\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n    \n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Key': this.apiKey,\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(error.error || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  async sendMessage(message: string): Promise<string> {\n    const data = await this.request<{ response: string; session_id: string }>(\n      '/api/v1/chat',\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          message,\n          product_id: this.productId,\n          session_id: this.sessionId,\n        }),\n      }\n    );\n\n    return data.response;\n  }\n\n  async getSuggestedQuestions(): Promise<SuggestedQuestion[]> {\n    return this.request<SuggestedQuestion[]>(\n      `/api/v1/questions/${this.productId}`\n    );\n  }\n\n  async getWidgetConfig(): Promise<WidgetConfig> {\n    return this.request<WidgetConfig>('/api/v1/config');\n  }\n}", "import { useState, useEffect, useCallback, useRef } from 'react';\nimport { ChatbotAPI } from '../api/chatbot';\nimport type { ChatMessage, UseChatOptions, UseChatReturn, SuggestedQuestion } from '../types';\n\nexport function useChat(options: UseChatOptions): UseChatReturn {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBotTyping, setIsBotTyping] = useState(false);\n  const [suggestedQuestions, setSuggestedQuestions] = useState<SuggestedQuestion[]>([]);\n  const [error, setError] = useState<Error | null>(null);\n  \n  const apiClientRef = useRef<ChatbotAPI | null>(null);\n\n  useEffect(() => {\n    apiClientRef.current = new ChatbotAPI({\n      apiKey: options.apiKey,\n      productId: options.productId,\n      apiBaseUrl: options.apiBaseUrl,\n    });\n\n    const fetchQuestions = async () => {\n      try {\n        const questions = await apiClientRef.current!.getSuggestedQuestions();\n        setSuggestedQuestions(questions);\n      } catch (err) {\n        console.error('Failed to fetch suggested questions:', err);\n      }\n    };\n\n    fetchQuestions();\n  }, [options.apiKey, options.productId, options.apiBaseUrl]);\n\n  const sendMessage = useCallback(\n    async (messageText: string) => {\n      if (!messageText.trim() || !apiClientRef.current) return;\n\n      const userMessage: ChatMessage = {\n        sender: 'user',\n        text: messageText,\n        timestamp: Date.now(),\n      };\n\n      setMessages((prev) => [...prev, userMessage]);\n      setIsLoading(true);\n      setIsBotTyping(true);\n      setError(null);\n\n      try {\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        \n        const response = await apiClientRef.current.sendMessage(messageText);\n        \n        const botMessage: ChatMessage = {\n          sender: 'chatbot',\n          text: response,\n          timestamp: Date.now(),\n        };\n\n        setMessages((prev) => [...prev, botMessage]);\n      } catch (err) {\n        const error = err instanceof Error ? err : new Error('Unknown error');\n        setError(error);\n        \n        if (options.onError) {\n          options.onError(error);\n        }\n\n        const errorMessage: ChatMessage = {\n          sender: 'chatbot',\n          text: 'Sorry, something went wrong. Please try again.',\n          timestamp: Date.now(),\n        };\n        setMessages((prev) => [...prev, errorMessage]);\n      } finally {\n        setIsLoading(false);\n        setIsBotTyping(false);\n      }\n    },\n    [options]\n  );\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setError(null);\n  }, []);\n\n  return {\n    messages,\n    sendMessage,\n    isLoading,\n    isBotTyping,\n    suggestedQuestions,\n    error,\n    clearMessages,\n  };\n}", "import type { ChatConfig } from '../types';\n\nexport function formatTimestamp(timestamp: number): string {\n  const date = new Date(timestamp);\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n}\n\nexport function validateConfig(config: Partial<ChatConfig>): config is ChatConfig {\n  return !!(config.apiKey && config.productId);\n}\n\nexport function sanitizeMessage(message: string): string {\n  return message.trim().replace(/<[^>]*>/g, '');\n}", "import React from 'react';\nimport { ChatMessage as MessageType } from '@un360/core';\n\ninterface ChatMessageProps {\n  message: MessageType;\n  theme: any;\n}\n\nexport const ChatMessage: React.FC<ChatMessageProps> = ({ message, theme }) => {\n  const isUser = message.sender === 'user';\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: isUser ? 'flex-end' : 'flex-start',\n        marginBottom: '12px',\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: isUser ? theme.primaryColor : '#f1f1f1',\n          color: isUser ? theme.secondaryColor : '#333',\n          padding: '10px 14px',\n          borderRadius: '12px',\n          maxWidth: '70%',\n          wordBreak: 'break-word',\n          fontSize: '14px',\n          lineHeight: '1.4',\n        }}\n      >\n        {message.text}\n      </div>\n    </div>\n  );\n};", "import React from 'react';\nimport { SuggestedQuestion } from '@un360/core';\n\ninterface SuggestedQuestionsProps {\n  questions: SuggestedQuestion[];\n  onClick: (question: string) => void;\n}\n\nexport const SuggestedQuestions: React.FC<SuggestedQuestionsProps> = ({\n  questions,\n  onClick,\n}) => {\n  return (\n    <>\n      {questions.map((q) => (\n        <div\n          key={q.id}\n          onClick={() => onClick(q.question)}\n          style={{\n            backgroundColor: '#f9f9f9',\n            padding: '12px',\n            borderRadius: '8px',\n            marginBottom: '8px',\n            cursor: 'pointer',\n            border: '1px solid #e0e0e0',\n            transition: 'all 0.2s',\n          }}\n        >\n          {q.question}\n        </div>\n      ))}\n    </>\n  );\n};", "import React from 'react';\n\nexport const TypingIndicator: React.FC = () => {\n  return (\n    <div style={{ display: 'flex', justifyContent: 'flex-start', marginBottom: '12px' }}>\n      <div\n        style={{\n          backgroundColor: '#f1f1f1',\n          padding: '10px 14px',\n          borderRadius: '12px',\n          fontSize: '14px',\n        }}\n      >\n        <span style={{ animation: 'pulse 1.5s infinite' }}>●</span>\n        <span style={{ animation: 'pulse 1.5s infinite 0.2s' }}>●</span>\n        <span style={{ animation: 'pulse 1.5s infinite 0.4s' }}>●</span>\n      </div>\n    </div>\n  );\n};", "import React, { useRef, useEffect } from 'react';\nimport { ChatMessage as Message } from '@un360/core';\nimport { ChatMessage } from './ChatMessage';\nimport { SuggestedQuestions } from './SuggestedQuestions';\nimport { TypingIndicator } from './TypingIndicator';\n\ninterface ChatMessagesProps {\n  messages: Message[];\n  isBotTyping: boolean;\n  greetingMessage: string;\n  suggestedQuestions: any[];\n  onQuestionClick: (question: string) => void;\n  theme: any;\n}\n\nexport const ChatMessages: React.FC<ChatMessagesProps> = ({\n  messages,\n  isBotTyping,\n  greetingMessage,\n  suggestedQuestions,\n  onQuestionClick,\n  theme,\n}) => {\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        overflowY: 'auto',\n        padding: '16px',\n        backgroundColor: theme.backgroundColor,\n      }}\n    >\n      {messages.length === 0 && (\n        <div style={{ textAlign: 'center', color: '#999', padding: '20px', fontStyle: 'italic' }}>\n          {greetingMessage}\n        </div>\n      )}\n\n      {messages.length === 0 && (\n        <SuggestedQuestions questions={suggestedQuestions} onClick={onQuestionClick} />\n      )}\n\n      {messages.map((msg, idx) => (\n        <ChatMessage key={idx} message={msg} theme={theme} />\n      ))}\n\n      {isBotTyping && <TypingIndicator />}\n\n      <div ref={messagesEndRef} />\n    </div>\n  );\n};", "import React, { useState } from 'react';\n\ninterface ChatInputProps {\n  onSend: (message: string) => void;\n  placeholder: string;\n  theme: any;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({ onSend, placeholder, theme }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSend = () => {\n    if (inputValue.trim()) {\n      onSend(inputValue);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <div\n      style={{\n        padding: '16px',\n        borderTop: '1px solid #e0e0e0',\n        backgroundColor: theme.secondaryColor,\n        display: 'flex',\n        gap: '8px',\n      }}\n    >\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n        placeholder={placeholder}\n        style={{\n          flex: 1,\n          padding: '10px 14px',\n          border: '1px solid #e0e0e0',\n          borderRadius: '20px',\n          fontSize: '14px',\n          outline: 'none',\n        }}\n      />\n      <button\n        onClick={handleSend}\n        style={{\n          backgroundColor: theme.primaryColor,\n          color: theme.secondaryColor,\n          border: 'none',\n          borderRadius: '50%',\n          width: '40px',\n          height: '40px',\n          cursor: 'pointer',\n          fontSize: '18px',\n        }}\n      >\n        ↑\n      </button>\n    </div>\n  );\n};", "import React from 'react';\n\ninterface FloatingButtonProps {\n  onClick: () => void;\n  position: string;\n  theme: any;\n}\n\nexport const FloatingButton: React.FC<FloatingButtonProps> = ({\n  onClick,\n  position,\n  theme,\n}) => {\n  return (\n    <button\n      onClick={onClick}\n      style={{\n        position: 'fixed',\n        [position.includes('right') ? 'right' : 'left']: '20px',\n        [position.includes('bottom') ? 'bottom' : 'top']: '20px',\n        width: '60px',\n        height: '60px',\n        borderRadius: '50%',\n        border: 'none',\n        backgroundColor: theme.primaryColor,\n        color: theme.secondaryColor,\n        fontSize: '24px',\n        cursor: 'pointer',\n        boxShadow: '0 4px 12px rgba(0,0,0,0.15)',\n        zIndex: 9999,\n      }}\n    >\n      💬\n    </button>\n  );\n};", "import { useEffect, RefObject } from 'react';\n\nexport function useClickOutside(\n  ref: RefObject<HTMLElement>,\n  handler: () => void\n) {\n  useEffect(() => {\n    const listener = (event: MouseEvent | TouchEvent) => {\n      if (!ref.current || ref.current.contains(event.target as Node)) {\n        return;\n      }\n      handler();\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}", "import React from 'react';\n\ninterface ChatHeaderProps {\n  onMinimize: () => void;\n  onMaximize: () => void;\n  onClose: () => void;\n  theme: any;\n}\n\nexport const ChatHeader: React.FC<ChatHeaderProps> = ({\n  onMinimize,\n  onMaximize,\n  onClose,\n  theme,\n}) => {\n  return (\n    <div\n      style={{\n        backgroundColor: theme.primaryColor,\n        color: theme.secondaryColor,\n        padding: '16px',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n      }}\n    >\n      <span style={{ fontWeight: 'bold', fontSize: '16px' }}>Product Assistant</span>\n      <div style={{ display: 'flex', gap: '8px' }}>\n        <button onClick={onMinimize} style={buttonStyle}>−</button>\n        <button onClick={onMaximize} style={buttonStyle}>□</button>\n        <button onClick={onClose} style={buttonStyle}>×</button>\n      </div>\n    </div>\n  );\n};\n\nconst buttonStyle = {\n  background: 'transparent',\n  border: 'none',\n  color: 'white',\n  fontSize: '20px',\n  cursor: 'pointer',\n  padding: '0 6px',\n};", "import React, { useState, useRef } from 'react';\nimport { useChat } from '@un360/core';\nimport { ChatMessages } from './ChatMessages';\nimport { ChatInput } from './ChatInput';\nimport { FloatingButton } from './FloatingButton';\nimport { useClickOutside } from '../hooks/useClickOutside';\nimport { ChatHeader } from './ChatHeader';\n\nexport interface ThemeConfig {\n  primaryColor?: string;\n  secondaryColor?: string;\n  backgroundColor?: string;\n  fontFamily?: string;\n}\n\nexport interface ChatWidgetProps {\n  apiKey: string;\n  productId: string;\n  apiBaseUrl?: string;\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  theme?: ThemeConfig;\n  greetingMessage?: string;\n  placeholder?: string;\n}\n\nexport const ChatWidget: React.FC<ChatWidgetProps> = ({\n  apiKey,\n  productId,\n  apiBaseUrl,\n  position = 'bottom-right',\n  theme = {},\n  greetingMessage = 'Hello! Ask me about this product.',\n  placeholder = 'Type your message...',\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [isMaximized, setIsMaximized] = useState(false);\n  \n  const chatRef = useRef<HTMLDivElement>(null);\n  \n  const {\n    messages,\n    sendMessage,\n    isBotTyping,\n    suggestedQuestions,\n  } = useChat({ apiKey, productId, apiBaseUrl });\n\n  useClickOutside(chatRef, () => setIsOpen(false));\n\n  const defaultTheme = {\n    primaryColor: theme.primaryColor || '#1976d2',\n    secondaryColor: theme.secondaryColor || '#fff',\n    backgroundColor: theme.backgroundColor || '#f5f5f5',\n    fontFamily: theme.fontFamily || 'Arial, sans-serif',\n  };\n\n  const handleMinimize = () => {\n    setIsMinimized(true);\n    setIsMaximized(false);\n  };\n\n  const handleMaximize = () => {\n    setIsMaximized(true);\n    setIsMinimized(false);\n  };\n\n  const handleClose = () => setIsOpen(false);\n  const toggleChat = () => setIsOpen(!isOpen);\n\n  if (!isOpen) {\n    return <FloatingButton onClick={toggleChat} position={position} theme={defaultTheme} />;\n  }\n\n  return (\n    <div\n      ref={chatRef}\n      style={{\n        position: 'fixed',\n        [position.includes('right') ? 'right' : 'left']: '20px',\n        [position.includes('bottom') ? 'bottom' : 'top']: '20px',\n        width: isMaximized ? '600px' : '350px',\n        height: isMinimized ? '60px' : isMaximized ? '80vh' : '500px',\n        backgroundColor: defaultTheme.secondaryColor,\n        borderRadius: '12px',\n        boxShadow: '0 8px 24px rgba(0,0,0,0.2)',\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'hidden',\n        transition: 'all 0.3s ease',\n        fontFamily: defaultTheme.fontFamily,\n        zIndex: 10000,\n      }}\n    >\n      <ChatHeader\n        onMinimize={handleMinimize}\n        onMaximize={handleMaximize}\n        onClose={handleClose}\n        theme={defaultTheme}\n      />\n\n      {!isMinimized && (\n        <>\n          <ChatMessages\n            messages={messages}\n            isBotTyping={isBotTyping}\n            greetingMessage={greetingMessage}\n            suggestedQuestions={suggestedQuestions}\n            onQuestionClick={(question) => sendMessage(question)}\n            theme={defaultTheme}\n          />\n          \n          <ChatInput\n            onSend={sendMessage}\n            placeholder={placeholder}\n            theme={defaultTheme}\n          />\n        </>\n      )}\n    </div>\n  );\n};", "import { useState } from 'react';\n\nexport function useChatUI() {\n  const [isOpen, setIsOpen] = useState(false);\n  \n  return {\n    isOpen,\n    setIsOpen,\n  };\n}\n", "import React, { createContext, useContext, ReactNode } from 'react';\nimport { useChat, UseChatReturn } from '@un360/core';\n\ninterface ChatContextValue extends UseChatReturn {\n  apiKey: string;\n  productId: string;\n}\n\nconst ChatContext = createContext<ChatContextValue | undefined>(undefined);\n\ninterface ChatProviderProps {\n  apiKey: string;\n  productId: string;\n  apiBaseUrl?: string;\n  children: ReactNode;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({\n  apiKey,\n  productId,\n  apiBaseUrl,\n  children,\n}) => {\n  const chatData = useChat({ apiKey, productId, apiBaseUrl });\n\n  const value: ChatContextValue = {\n    ...chatData,\n    apiKey,\n    productId,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n};\n\nexport const useChatContext = () => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChatContext must be used within ChatProvider');\n  }\n  return context;\n};"],
  "mappings": "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",
  "names": ["error", "React", "_jsx"]
}
