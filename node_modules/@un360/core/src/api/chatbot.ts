import type { ChatConfig, SuggestedQuestion, WidgetConfig } from '../types';

export class ChatbotAPI {
  private apiKey: string;
  private baseUrl: string;
  private productId: string;
  private sessionId: string;

  constructor(config: ChatConfig) {
    this.apiKey = config.apiKey;
    this.baseUrl = config.apiBaseUrl || 'http://127.0.0.1:8000';
    this.productId = config.productId;
    this.sessionId = config.sessionId || this.generateSessionId();
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': this.apiKey,
        ...options.headers,
      },
    });

    if (!response.ok) {
      const error = await response.json().catch(() => ({ error: 'Unknown error' }));
      throw new Error(error.error || `HTTP ${response.status}`);
    }

    return response.json();
  }

  async sendMessage(message: string): Promise<string> {
    const data = await this.request<{ response: string; session_id: string }>(
      '/api/v1/chat',
      {
        method: 'POST',
        body: JSON.stringify({
          message,
          product_id: this.productId,
          session_id: this.sessionId,
        }),
      }
    );

    return data.response;
  }

  async getSuggestedQuestions(): Promise<SuggestedQuestion[]> {
    return this.request<SuggestedQuestion[]>(
      `/api/v1/questions/${this.productId}`
    );
  }

  async getWidgetConfig(): Promise<WidgetConfig> {
    return this.request<WidgetConfig>('/api/v1/config');
  }
}