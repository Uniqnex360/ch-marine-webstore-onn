import type { ProductContext } from '../types';
export function extractProductFromPage():ProductContext{
    const extractors=[
        extractFromStructuredData,
        extractFromOpenGraph,
        extractFromShopify,
        extractFromWooCommerce,
        extractFromDOM

    ]
      let productData: Partial<ProductContext> = {};
    for (const extractor of extractors)
    {
        try {
            const data=extractor()
            productData = { ...productData, ...data };

        } catch (error) {
            console.debug("Extractor failed",extractor.name,error)
        }
    }
    if(!productData.sku)
    {
        productData.sku=generateFallbackSKU()
    }
    if(!productData.name)
    {
        productData.name=extractFromTitle()||"Unknown product"
    }
    return productData as ProductContext
}
function extractFromStructuredData():Partial<ProductContext>{
    const scripts=document.querySelectorAll('script[type="application/ld+json"]')
    for (const script of Array.from(scripts))
    {
        try {
            const data=JSON.parse(script.textContent||"")
            if(data["@type"]=='Product'||data["@type"]?.includes("Product"))
            {
                return {
                    sku:data.sku||data.productID||data.mpn,
                    name:data.name,
                    description:data.description,
                    price:parseFloat(data.offers?.price||data.price),
                    currency:data.offers?.priceCurrency,
                    brand:data.brand?.name||data.brand,
                    images:Array.isArray(data.image)?data.image:[data.image],
                    url:data.url||window.location.href,
                    inStock:data.offers?.availability?.includes('InStock')||data.offers?.availability==='https://schema.org/InStock',

                }
            }
        } catch (error) {
            console.debug("Failed to parse structured data",error)
        }
    }
    return {}
}

function extractFromOpenGraph():Partial<ProductContext>{
    const getMeta=(property:string):string|undefined=>{
        const tag = document.querySelector(`meta[property="${property}"]`) ||
                document.querySelector(`meta[name="${property}"]`);
    return tag?.getAttribute('content') || undefined;
    }
    return {
        name:getMeta('og:title')||getMeta('twitter:title'),
        description:getMeta('og:description')||getMeta('twitter:description')||getMeta('description'),
        images: [getMeta('og:image') || getMeta('twitter:image')].filter(Boolean) as string[],
        url: getMeta('og:url') || window.location.href,
        price:parseFloat(getMeta('product:price:amount')||'0')||undefined,
        currency:getMeta('product:price:currency')
        
    }
}
function extractFromShopify():Partial<ProductContext>{
    const shopify=(window as any).ShopifyAnalytics?.meta?.product
    const product=(window as any).product
    if(shopify ||product)
    {
        const data=shopify||product
        return {
            sku:data.variants?.[0]?.sku||data.sku,
            name:data.title||data.name,
            description:data.description,
            price:data.price?parseFloat(data.price)/100:undefined,
            category:data.type||data.product_type,
            brand:data.vendor,
            images:data.images?.map((img:any)=>img.src||img)||[],
            inStock:data.available
        }
    }
    const getShopifyMeta=(name:string)=>{
        return document.querySelector(`meta[name="shopify-${name}"]`)?.getAttribute('content');
    }
    return {
        sku:getShopifyMeta('product-sku') as string,
        name:getShopifyMeta('product-name') as string
    }
}
function extractFromWooCommerce():Partial<ProductContext>{
    const productElement = document.querySelector('.product, [itemtype*="schema.org/Product"]');
    if(!productElement)return {}
    return {
        sku:productElement.querySelector('.sku')?.textContent?.trim(),
         name: productElement.querySelector('.product_title, .product-title')?.textContent?.trim(),
        description:productElement.querySelector('woocommerce-product-details__short-description')?.textContent?.trim(),
        price: parseFloat(
      productElement.querySelector('.price .amount, .price')?.textContent?.replace(/[^0-9.]/g, '') || '0'
    ) || undefined,
    category:productElement.querySelector('.posted_in a')?.textContent?.trim(),
    brand:productElement.querySelector('.brand')?.textContent?.trim(),
    images: Array.from(productElement.querySelectorAll('.woocommerce-product-gallery__image img'))
      .map(img => (img as HTMLImageElement).src),
    inStock: !productElement.querySelector('.out-of-stock'),
    }
}
function extractFromDOM():Partial<ProductContext>{
    const selectors={
        name:[
            "h1.product-title",
            "h1.product.product-name",
            'h1[itemprop="name"]',
            '.product-title',
            '.product-name',
            'h1'

        ],
        price:[
            '[itemprop="price"]',
            '.price',
            '.product-price',
            '.current-price',
            '[data-product-price]'

        ],
        description:[
            '[itemprop="description"]',
            '.product-description',
            '.description',
            '.product-details'
        ],
        sku:[
            '[itemprop="sku"]',
            '.sku',
            '.product-sku',
            '[data-product-sku]'
        ],
        images:[
             '[itemprop="images"]',
             '.product-image img',
             '.main-image img',
             '[data-product-image]',
        ]
    }
    const findFirst=(selectorList:string[]):Element|null=>{
        for(const selector of selectorList)
        {
            const element=document.querySelector(selector)
            if(element)return element
        }
        return null
    }
    const nameElement=findFirst(selectors.name)
    const priceElement=findFirst(selectors.price)
    const descElement=findFirst(selectors.description)
    const skuElement=findFirst(selectors.sku)
    const imageElement=findFirst(selectors.images)
    return {
        name:nameElement?.textContent.trim(),
        price: parseFloat(priceElement?.textContent?.replace(/[^0-9.]/g, '') || '0') || undefined,
        description:descElement?.textContent.trim(),
        sku:skuElement?.textContent?.trim(),
        images: imageElement ? [(imageElement as HTMLImageElement).src] : [],
        url:window.location.href
    }
}
function extractFromTitle():string|undefined{
    return document.title?.split('|')[0]?.split('-')[0]?.trim();
}
function generateFallbackSKU():string{
    const path=window.location.pathname
    const segments=path.split('/').filter(Boolean)
    const lastSegment = segments[segments.length - 1] || 'unknown';
    const sku = lastSegment.replace(/\.(html?|php|aspx?)$/i, '');
    return `auto-${sku}`;
}