import { useState, useEffect, useCallback, useRef } from 'react';
import { ChatbotAPI } from '../api/chatbot';
import type { ChatMessage, UseChatOptions, UseChatReturn, SuggestedQuestion } from '../types';

export function useChat(options: UseChatOptions): UseChatReturn {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isBotTyping, setIsBotTyping] = useState(false);
  const [suggestedQuestions, setSuggestedQuestions] = useState<SuggestedQuestion[]>([]);
  const [error, setError] = useState<Error | null>(null);
  
  const apiClientRef = useRef<ChatbotAPI | null>(null);

  useEffect(() => {
    apiClientRef.current = new ChatbotAPI({
      apiKey: options.apiKey,
      productContext:options.productContext,
      apiBaseUrl: options.apiBaseUrl,
    });

    const fetchQuestions = async () => {
      try {
        const questions = await apiClientRef.current!.getSuggestedQuestions();
        setSuggestedQuestions(questions);
      } catch (err) {
        console.error('Failed to fetch suggested questions:', err);
      }
    };

    fetchQuestions();
  }, [options.apiKey,options.productContext.sku, options.apiBaseUrl]);

  const sendMessage = useCallback(
    async (messageText: string) => {
      if (!messageText.trim() || !apiClientRef.current) return;

      const userMessage: ChatMessage = {
        sender: 'user',
        text: messageText,
        timestamp: Date.now(),
      };

      setMessages((prev) => [...prev, userMessage]);
      setIsLoading(true);
      setIsBotTyping(true);
      setError(null);

      try {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        
        const response = await apiClientRef.current.sendMessage(messageText);
        
        const botMessage: ChatMessage = {
          sender: 'chatbot',
          text: response,
          timestamp: Date.now(),
        };

        setMessages((prev) => [...prev, botMessage]);
      } catch (err) {
        const error = err instanceof Error ? err : new Error('Unknown error');
        setError(error);
        
        if (options.onError) {
          options.onError(error);
        }

        const errorMessage: ChatMessage = {
          sender: 'chatbot',
          text: 'Sorry, something went wrong. Please try again.',
          timestamp: Date.now(),
        };
        setMessages((prev) => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
        setIsBotTyping(false);
      }
    },
    [options]
  );

  const clearMessages = useCallback(() => {
    setMessages([]);
    setError(null);
  }, []);

  return {
    messages,
    sendMessage,
    isLoading,
    isBotTyping,
    suggestedQuestions,
    error,
    clearMessages,
  };
}