'use strict';

var react = require('react');

class ChatbotAPI {
    constructor(config) {
        this.apiKey = config.apiKey;
        this.baseUrl = config.apiBaseUrl || 'http://127.0.0.1:8000';
        this.productId = config.productId;
        this.sessionId = config.sessionId || this.generateSessionId();
    }
    generateSessionId() {
        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    async request(endpoint, options = {}) {
        const url = `${this.baseUrl}${endpoint}`;
        const response = await fetch(url, {
            ...options,
            headers: {
                'Content-Type': 'application/json',
                'X-API-Key': this.apiKey,
                ...options.headers,
            },
        });
        if (!response.ok) {
            const error = await response.json().catch(() => ({ error: 'Unknown error' }));
            throw new Error(error.error || `HTTP ${response.status}`);
        }
        return response.json();
    }
    async sendMessage(message) {
        const data = await this.request('/api/v1/chat', {
            method: 'POST',
            body: JSON.stringify({
                message,
                product_id: this.productId,
                session_id: this.sessionId,
            }),
        });
        return data.response;
    }
    async getSuggestedQuestions() {
        return this.request(`/api/v1/questions/${this.productId}`);
    }
    async getWidgetConfig() {
        return this.request('/api/v1/config');
    }
}

function useChat(options) {
    const [messages, setMessages] = react.useState([]);
    const [isLoading, setIsLoading] = react.useState(false);
    const [isBotTyping, setIsBotTyping] = react.useState(false);
    const [suggestedQuestions, setSuggestedQuestions] = react.useState([]);
    const [error, setError] = react.useState(null);
    const apiClientRef = react.useRef(null);
    react.useEffect(() => {
        apiClientRef.current = new ChatbotAPI({
            apiKey: options.apiKey,
            productId: options.productId,
            apiBaseUrl: options.apiBaseUrl,
        });
        const fetchQuestions = async () => {
            try {
                const questions = await apiClientRef.current.getSuggestedQuestions();
                setSuggestedQuestions(questions);
            }
            catch (err) {
                console.error('Failed to fetch suggested questions:', err);
            }
        };
        fetchQuestions();
    }, [options.apiKey, options.productId, options.apiBaseUrl]);
    const sendMessage = react.useCallback(async (messageText) => {
        if (!messageText.trim() || !apiClientRef.current)
            return;
        const userMessage = {
            sender: 'user',
            text: messageText,
            timestamp: Date.now(),
        };
        setMessages((prev) => [...prev, userMessage]);
        setIsLoading(true);
        setIsBotTyping(true);
        setError(null);
        try {
            await new Promise((resolve) => setTimeout(resolve, 1000));
            const response = await apiClientRef.current.sendMessage(messageText);
            const botMessage = {
                sender: 'chatbot',
                text: response,
                timestamp: Date.now(),
            };
            setMessages((prev) => [...prev, botMessage]);
        }
        catch (err) {
            const error = err instanceof Error ? err : new Error('Unknown error');
            setError(error);
            if (options.onError) {
                options.onError(error);
            }
            const errorMessage = {
                sender: 'chatbot',
                text: 'Sorry, something went wrong. Please try again.',
                timestamp: Date.now(),
            };
            setMessages((prev) => [...prev, errorMessage]);
        }
        finally {
            setIsLoading(false);
            setIsBotTyping(false);
        }
    }, [options]);
    const clearMessages = react.useCallback(() => {
        setMessages([]);
        setError(null);
    }, []);
    return {
        messages,
        sendMessage,
        isLoading,
        isBotTyping,
        suggestedQuestions,
        error,
        clearMessages,
    };
}

function formatTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
}
function validateConfig(config) {
    return !!(config.apiKey && config.productId);
}

exports.ChatbotAPI = ChatbotAPI;
exports.formatTimestamp = formatTimestamp;
exports.useChat = useChat;
exports.validateConfig = validateConfig;
//# sourceMappingURL=index.js.map
