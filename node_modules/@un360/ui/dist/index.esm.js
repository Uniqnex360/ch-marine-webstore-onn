import React, { useRef, useEffect, useState } from 'react';
import { useChat } from '@un360/core';

const ChatMessage = ({ message, theme }) => {
    const isUser = message.sender === 'user';
    return (React.createElement("div", { style: {
            display: 'flex',
            justifyContent: isUser ? 'flex-end' : 'flex-start',
            marginBottom: '12px',
        } },
        React.createElement("div", { style: {
                backgroundColor: isUser ? theme.primaryColor : '#f1f1f1',
                color: isUser ? theme.secondaryColor : '#333',
                padding: '10px 14px',
                borderRadius: '12px',
                maxWidth: '70%',
                wordBreak: 'break-word',
                fontSize: '14px',
                lineHeight: '1.4',
            } }, message.text)));
};

const SuggestedQuestions = ({ questions, onClick, }) => {
    return (React.createElement(React.Fragment, null, questions.map((q) => (React.createElement("div", { key: q.id, onClick: () => onClick(q.question), style: {
            backgroundColor: '#f9f9f9',
            padding: '12px',
            borderRadius: '8px',
            marginBottom: '8px',
            cursor: 'pointer',
            border: '1px solid #e0e0e0',
            transition: 'all 0.2s',
        } }, q.question)))));
};

const TypingIndicator = () => {
    return (React.createElement("div", { style: { display: 'flex', justifyContent: 'flex-start', marginBottom: '12px' } },
        React.createElement("div", { style: {
                backgroundColor: '#f1f1f1',
                padding: '10px 14px',
                borderRadius: '12px',
                fontSize: '14px',
            } },
            React.createElement("span", { style: { animation: 'pulse 1.5s infinite' } }, "\u25CF"),
            React.createElement("span", { style: { animation: 'pulse 1.5s infinite 0.2s' } }, "\u25CF"),
            React.createElement("span", { style: { animation: 'pulse 1.5s infinite 0.4s' } }, "\u25CF"))));
};

const ChatMessages = ({ messages, isBotTyping, greetingMessage, suggestedQuestions, onQuestionClick, theme, }) => {
    const messagesEndRef = useRef(null);
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);
    return (React.createElement("div", { style: {
            flex: 1,
            overflowY: 'auto',
            padding: '16px',
            backgroundColor: theme.backgroundColor,
        } },
        messages.length === 0 && (React.createElement("div", { style: { textAlign: 'center', color: '#999', padding: '20px', fontStyle: 'italic' } }, greetingMessage)),
        messages.length === 0 && (React.createElement(SuggestedQuestions, { questions: suggestedQuestions, onClick: onQuestionClick })),
        messages.map((msg, idx) => (React.createElement(ChatMessage, { key: idx, message: msg, theme: theme }))),
        isBotTyping && React.createElement(TypingIndicator, null),
        React.createElement("div", { ref: messagesEndRef })));
};

const ChatInput = ({ onSend, placeholder, theme }) => {
    const [inputValue, setInputValue] = useState('');
    const handleSend = () => {
        if (inputValue.trim()) {
            onSend(inputValue);
            setInputValue('');
        }
    };
    return (React.createElement("div", { style: {
            padding: '16px',
            borderTop: '1px solid #e0e0e0',
            backgroundColor: theme.secondaryColor,
            display: 'flex',
            gap: '8px',
        } },
        React.createElement("input", { type: "text", value: inputValue, onChange: (e) => setInputValue(e.target.value), onKeyPress: (e) => e.key === 'Enter' && handleSend(), placeholder: placeholder, style: {
                flex: 1,
                padding: '10px 14px',
                border: '1px solid #e0e0e0',
                borderRadius: '20px',
                fontSize: '14px',
                outline: 'none',
            } }),
        React.createElement("button", { onClick: handleSend, style: {
                backgroundColor: theme.primaryColor,
                color: theme.secondaryColor,
                border: 'none',
                borderRadius: '50%',
                width: '40px',
                height: '40px',
                cursor: 'pointer',
                fontSize: '18px',
            } }, "\u2191")));
};

const FloatingButton = ({ onClick, position, theme, }) => {
    return (React.createElement("button", { onClick: onClick, style: {
            position: 'fixed',
            [position.includes('right') ? 'right' : 'left']: '20px',
            [position.includes('bottom') ? 'bottom' : 'top']: '20px',
            width: '60px',
            height: '60px',
            borderRadius: '50%',
            border: 'none',
            backgroundColor: theme.primaryColor,
            color: theme.secondaryColor,
            fontSize: '24px',
            cursor: 'pointer',
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
            zIndex: 9999,
        } }, "\uD83D\uDCAC"));
};

function useClickOutside(ref, handler) {
    useEffect(() => {
        const listener = (event) => {
            if (!ref.current || ref.current.contains(event.target)) {
                return;
            }
            handler();
        };
        document.addEventListener('mousedown', listener);
        document.addEventListener('touchstart', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
            document.removeEventListener('touchstart', listener);
        };
    }, [ref, handler]);
}

const ChatHeader = ({ onMinimize, onMaximize, onClose, theme, }) => {
    return (React.createElement("div", { style: {
            backgroundColor: theme.primaryColor,
            color: theme.secondaryColor,
            padding: '16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
        } },
        React.createElement("span", { style: { fontWeight: 'bold', fontSize: '16px' } }, "Product Assistant"),
        React.createElement("div", { style: { display: 'flex', gap: '8px' } },
            React.createElement("button", { onClick: onMinimize, style: buttonStyle }, "\u2212"),
            React.createElement("button", { onClick: onMaximize, style: buttonStyle }, "\u25A1"),
            React.createElement("button", { onClick: onClose, style: buttonStyle }, "\u00D7"))));
};
const buttonStyle = {
    background: 'transparent',
    border: 'none',
    color: 'white',
    fontSize: '20px',
    cursor: 'pointer',
    padding: '0 6px',
};

const ChatWidget = ({ apiKey, productId, apiBaseUrl, position = 'bottom-right', theme = {}, greetingMessage = 'Hello! Ask me about this product.', placeholder = 'Type your message...', }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [isMinimized, setIsMinimized] = useState(false);
    const [isMaximized, setIsMaximized] = useState(false);
    const chatRef = useRef(null);
    const { messages, sendMessage, isBotTyping, suggestedQuestions, } = useChat({ apiKey, productId, apiBaseUrl });
    useClickOutside(chatRef, () => setIsOpen(false));
    const defaultTheme = {
        primaryColor: theme.primaryColor || '#1976d2',
        secondaryColor: theme.secondaryColor || '#fff',
        backgroundColor: theme.backgroundColor || '#f5f5f5',
        fontFamily: theme.fontFamily || 'Arial, sans-serif',
    };
    const handleMinimize = () => {
        setIsMinimized(true);
        setIsMaximized(false);
    };
    const handleMaximize = () => {
        setIsMaximized(true);
        setIsMinimized(false);
    };
    const handleClose = () => setIsOpen(false);
    const toggleChat = () => setIsOpen(!isOpen);
    if (!isOpen) {
        return React.createElement(FloatingButton, { onClick: toggleChat, position: position, theme: defaultTheme });
    }
    return (React.createElement("div", { ref: chatRef, style: {
            position: 'fixed',
            [position.includes('right') ? 'right' : 'left']: '20px',
            [position.includes('bottom') ? 'bottom' : 'top']: '20px',
            width: isMaximized ? '600px' : '350px',
            height: isMinimized ? '60px' : isMaximized ? '80vh' : '500px',
            backgroundColor: defaultTheme.secondaryColor,
            borderRadius: '12px',
            boxShadow: '0 8px 24px rgba(0,0,0,0.2)',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
            transition: 'all 0.3s ease',
            fontFamily: defaultTheme.fontFamily,
            zIndex: 10000,
        } },
        React.createElement(ChatHeader, { onMinimize: handleMinimize, onMaximize: handleMaximize, onClose: handleClose, theme: defaultTheme }),
        !isMinimized && (React.createElement(React.Fragment, null,
            React.createElement(ChatMessages, { messages: messages, isBotTyping: isBotTyping, greetingMessage: greetingMessage, suggestedQuestions: suggestedQuestions, onQuestionClick: (question) => sendMessage(question), theme: defaultTheme }),
            React.createElement(ChatInput, { onSend: sendMessage, placeholder: placeholder, theme: defaultTheme })))));
};

function useChatUI() {
    const [isOpen, setIsOpen] = useState(false);
    return {
        isOpen,
        setIsOpen,
    };
}

export { ChatHeader, ChatInput, ChatMessage, ChatMessages, ChatWidget, FloatingButton, SuggestedQuestions, TypingIndicator, useChatUI, useClickOutside };
//# sourceMappingURL=index.esm.js.map
