import React, { useState, useRef, useEffect } from 'react';
import { useChat } from '@un360/core';
import type { ProductContext } from '@un360/core';
import {    extractProductFromPage } from '@un360/core';
import { ChatHeader } from './ChatHeader';
import { ChatMessages } from './ChatMessages';
import { ChatInput } from './ChatInput';
import { FloatingButton } from './FloatingButton';
import { useClickOutside } from '../hooks/useClickOutside';

export interface ThemeConfig {
  primaryColor?: string;
  secondaryColor?: string;
  backgroundColor?: string;
  fontFamily?: string;
}

export interface ChatWidgetProps {
  apiKey: string;
  productContext?: ProductContext;
  apiBaseUrl?: string;
  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';
  theme?: ThemeConfig;
  greetingMessage?: string;
  placeholder?: string;
}

export const ChatWidget: React.FC<ChatWidgetProps> = ({
  apiKey,
  productContext: providedContext,
  apiBaseUrl,
  position = 'bottom-right',
  theme = {},
  greetingMessage,
  placeholder = 'Type your message...',
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [isMaximized, setIsMaximized] = useState(false);
  const [productContext, setProductContext] = useState<ProductContext | null>(null);
  
  const chatRef = useRef<HTMLDivElement>(null);

  // Auto-extract product context on mount
  useEffect(() => {
    if (providedContext) {
      console.log('Using provided product context:', providedContext);
      setProductContext(providedContext);
    } else {
      try {
        console.log('Auto-extracting product data from page...');
        const extracted = extractProductFromPage();
        console.log('Auto-extracted product data:', extracted);
        setProductContext(extracted);
      } catch (error) {
        console.error('Failed to extract product data:', error);
        setProductContext({
          sku: 'unknown',
          name: 'Unknown Product',
          url: window.location.href,
        });
      }
    }
  }, [providedContext]);
  
  // ✅ Only call useChat when productContext is available
  const chatHookEnabled = productContext !== null;
  
  const {
    messages,
    sendMessage,
    isBotTyping,
    suggestedQuestions,
  } = useChat({ 
    apiKey, 
    productContext: productContext || { sku: 'loading', name: 'Loading...' }, // ✅ Provide fallback
    apiBaseUrl,
  });

  useClickOutside(chatRef, () => {
    if (!isMinimized) {
      setIsOpen(false);
    }
  });

  // ✅ Don't render until productContext is loaded
  if (!productContext) {
    return null; // or a loading spinner
  }

  const defaultTheme = {
    primaryColor: theme.primaryColor || '#1976d2',
    secondaryColor: theme.secondaryColor || '#fff',
    backgroundColor: theme.backgroundColor || '#f5f5f5',
    fontFamily: theme.fontFamily || 'Arial, sans-serif',
  };

  const handleMinimize = () => {
    setIsMinimized(true);
    setIsMaximized(false);
  };

  const handleMaximize = () => {
    setIsMaximized(true);
    setIsMinimized(false);
  };

  const handleRestore = () => {
    setIsMinimized(false);
    setIsMaximized(false);
  };

  const handleClose = () => {
    setIsOpen(false);
    setIsMinimized(false);
    setIsMaximized(false);
  };

  const toggleChat = () => setIsOpen(!isOpen);

  const defaultGreeting = greetingMessage || 
    "Hello! Ask me about this product"



  if (!isOpen) {
    return (
      <FloatingButton 
        onClick={toggleChat} 
        position={position} 
        theme={defaultTheme}
      />
    );
  }

  return (
    <div
      ref={chatRef}
      role="dialog"
      aria-label="Product chat widget"
      aria-modal="true"
      style={{
        position: 'fixed',
        [position.includes('right') ? 'right' : 'left']: '20px',
        [position.includes('bottom') ? 'bottom' : 'top']: '20px',
        width: isMaximized ? '600px' : '350px',
        height: isMinimized ? '60px' : isMaximized ? '80vh' : '500px',
        backgroundColor: defaultTheme.secondaryColor,
        borderRadius: '12px',
        boxShadow: '0 8px 24px rgba(0,0,0,0.2)',
        display: 'flex',
        flexDirection: 'column',
        overflow: 'hidden',
        transition: 'all 0.3s ease',
        fontFamily: defaultTheme.fontFamily,
        zIndex: 10000,
      }}
    >
      <ChatHeader
        onMinimize={handleMinimize}
        onMaximize={handleMaximize}
        onClose={handleClose}
        theme={defaultTheme}
      />

      {!isMinimized && (
        <>
          <ChatMessages
            messages={messages}
            isBotTyping={isBotTyping}
            greetingMessage={defaultGreeting}
            suggestedQuestions={suggestedQuestions}
            onQuestionClick={(question) => sendMessage(question)}
            theme={defaultTheme}
          />
          
          <ChatInput
            onSend={sendMessage}
            placeholder={placeholder}
            theme={defaultTheme}
          />
        </>
      )}
    </div>
  );
};