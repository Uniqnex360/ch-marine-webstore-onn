import React, { createContext, useContext, ReactNode } from 'react';
import { useChat, UseChatReturn } from '@un360/core';

interface ChatContextValue extends UseChatReturn {
  apiKey: string;
  productId: string;
}

const ChatContext = createContext<ChatContextValue | undefined>(undefined);

interface ChatProviderProps {
  apiKey: string;
  productId: string;
  apiBaseUrl?: string;
  children: ReactNode;
}

export const ChatProvider: React.FC<ChatProviderProps> = ({
  apiKey,
  productId,
  apiBaseUrl,
  children,
}) => {
  const chatData = useChat({ apiKey, productId, apiBaseUrl });

  const value: ChatContextValue = {
    ...chatData,
    apiKey,
    productId,
  };

  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;
};

export const useChatContext = () => {
  const context = useContext(ChatContext);
  if (!context) {
    throw new Error('useChatContext must be used within ChatProvider');
  }
  return context;
};